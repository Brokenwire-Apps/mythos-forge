### This file was generated by Nexus Schema
### Do not make changes to this file directly


"""User authentication provider"""
enum Authenticator {
  google
  magic
  other
}

"""The general climate of a setting."""
enum Climate {
  Polar
  Temperate
  Warm
}

"""UTC Date-time"""
scalar CsDateTime

"""The type of significant Event that occurs in a World."""
enum EventPolarity {
  NegativeExpected
  NegativeUnexpected
  Neutral
  PositiveExpected
  PositiveUnexpected
}

"""The target of a significant Event that occurs in a World"""
enum EventTarget {
  Local
  Person
  World
}

"""A super-set of Character types (e.g. trade profession)"""
enum GroupType {
  Culture
  Other
  Philosophy
  Trade
}

"""A collection of story `Chapters`"""
type MFBook {
  Author: MFUser
  Chapters: [MFChapter]!

  """Book Author/owner"""
  authorId: Int
  created: CsDateTime!
  description: String!
  genre: String!
  id: Int!
  lastSeen: CsDateTime!
  order: Int

  """Book series (e.g. 'Foundation Trilogy')"""
  seriesId: Int
  title: String!
}

"""A collection of Story `Scenes`"""
type MFChapter {
  Author: MFUser
  Book: MFBook
  Scenes: [MFScene]!

  """Author owner"""
  authorId: Int

  """Chapter's Book id"""
  bookId: Int
  created: CsDateTime!
  description: String!
  id: Int!
  lastSeen: CsDateTime!
  name: String!
  order: Int!
}

"""A significant actor in a `World`"""
type MFCharacter {
  CharacterRelationship: [MFCharacterRelationship]

  """Author owner"""
  authorId: Int

  """Character description"""
  description: String!

  """`Group` identifier id (optional)"""
  groupId: Int
  id: Int!

  """Character's `Location` id"""
  locationId: Int

  """Character name"""
  name: String!

  """Character's `World` id"""
  worldId: Int!
}

"""A linear relationship betwen actors in a `World`"""
type MFCharacterRelationship {
  Character: MFCharacter
  characterId: Int!
  id: Int!
  relationship: String!
  targetId: Int!
}

input MFCharacterUpsertInput {
  """Item Author/owner"""
  authorId: Int

  """Character writing-prompts or bio"""
  description: String = "No description"

  """Character group/profession (OPTIONAL)"""
  groupId: Int

  """Character ID"""
  id: Int

  """Character location (OPTIONAL)"""
  locationId: Int
  name: String!

  """World ID"""
  worldId: Int!
}

"""
A significant occurrence in a World or other location that acts as a story catalyst. 
"""
type MFEvent {
  World: MFWorld

  """Event Author"""
  authorId: Int

  """`Character` target (optional)"""
  characterId: Int
  description: String

  """`Group` target (optional)"""
  groupId: Int
  id: Int!

  """`Location` target (optional)"""
  locationId: Int
  name: String!
  polarity: EventPolarity!
  target: EventTarget!

  """Event target `World`"""
  worldId: Int!
}

input MFEventUpsertInput {
  """Item Author/owner"""
  authorId: Int

  """Event character target (optional)"""
  characterId: Int
  description: String = "No description"

  """Event group target (optional)"""
  groupId: Int

  """Event ID"""
  id: Int

  """Event location target (optional)"""
  locationId: Int
  name: String!
  polarity: EventPolarity!
  target: EventTarget!

  """Parent world ID"""
  worldId: Int!
}

"""A fixed, recurring setting in a World. """
type MFLocation {
  Characters: [MFCharacter]
  Events: [MFEvent]
  Groups: [MFPopulationGroup]
  Scenes: [MFScene]
  World: [MFWorld]

  """Event Author"""
  authorId: Int
  climate: Climate!
  description: String!
  fauna: Richness!
  flora: Richness!
  id: Int!
  name: String!

  """Event target `World`"""
  worldId: Int!
}

input MFLocationUpsertInput {
  """Item Author/owner"""
  authorId: Int
  climate: Climate
  description: String!
  fauna: Richness
  flora: Richness

  """Location ID"""
  id: Int
  name: String!

  """Parent world ID"""
  worldId: Int!
}

"""A single paragraph in a story. """
type MFParagraph {
  """Paragraph Author"""
  authorId: Int

  """Paragraph target `Character`"""
  characterId: Int
  id: Int!
  order: Int!

  """Paragraph parent `Scene`"""
  sceneId: Int
  text: String!
}

"""A collection of `Characters` (e.g. profession or religion)"""
type MFPopulationGroup {
  Character: [MFCharacter]!
  Event: [MFEvent]!

  """Group Author"""
  authorId: Int
  description: String!
  id: Int!

  """`PopulationGroup`'s location id"""
  locationId: Int
  name: String!

  """Group type"""
  type: GroupType!

  """`PopulationGroup`'s World id"""
  worldId: Int!
}

input MFRelationshipUpsertInput {
  """Item Author/owner"""
  authorId: Int

  """Character ID"""
  characterId: Int!

  """Relationship ID"""
  id: Int

  """Relationship notes"""
  relationship: String!

  """Target Character ID"""
  targetId: Int!
}

"""A collecton of Story `Paragraphs`"""
type MFScene {
  Paragraphs: [MFParagraph]!

  """Scene Author"""
  authorId: Int

  """Scene parent `Chapter`"""
  chapterId: Int!

  """Scene target `Character`"""
  characterId: Int
  description: String!

  """Main `Event` affecting `Scene`"""
  eventContextId: Int
  id: Int!

  """Scene `Location` (setting)"""
  locationId: Int!
  name: String!
  order: Int!

  """Context `Event` Timeline (optional)"""
  timelineId: Int
}

"""A collection of `Books` (e.g. a trilogy)"""
type MFSeries {
  Author: MFUser
  Books: [MFBook]!

  """Book Author/owner"""
  authorId: Int
  description: String!
  genre: String!
  id: Int!
  order: Int
  title: String!
}

"""A collection of Story `Scenes`"""
type MFTimeline {
  Author: MFUser
  Scenes: [MFScene]
  TimelineEvents: [MFTimelineEvent]
  World: MFWorld

  """Timeline Author"""
  authorId: Int
  id: Int!
  name: String!

  """Timeline's `World` id"""
  worldId: Int!
}

"""A linear `Event`-to-`Timeline` relationship"""
type MFTimelineEvent {
  Event: MFEvent
  Scenes: [MFScene]

  """Timeline Author"""
  authorId: Int

  """Target `Event` id"""
  eventId: Int!
  id: Int!
  order: Int!

  """Target `Timeline` id"""
  timelineId: Int!
}

input MFTimelineEventUpsertInput {
  """Item Author/owner"""
  authorId: Int

  """Event ID"""
  eventId: Int!

  """TimelineEvent ID"""
  id: Int

  """Event order in timeline"""
  order: Int!

  """Timeline ID"""
  timelineId: Int!
}

input MFTimelineUpsertInput {
  """Item Author/owner"""
  authorId: Int
  events: [MFTimelineEventUpsertInput!]

  """Timeline ID"""
  id: Int
  name: String!

  """Parent world ID"""
  worldId: Int!
}

"""An Application user"""
type MFUser {
  authSource: Authenticator!
  created: CsDateTime!
  displayName: String!
  email: String!
  id: Int!
  lastSeen: CsDateTime!
  role: UserRole!
}

"""A collection of `Locations`"""
type MFWorld {
  Events: [MFEvent]
  Groups: [MFPopulationGroup]
  Locations: [MFLocation]
  Timelines: [MFTimeline]

  """Book Author/owner"""
  authorId: Int
  description: String!
  id: Int!
  name: String!
  public: Boolean!
  type: WorldType!
}

input MFWorldUpsertInput {
  """Item Author/owner"""
  authorId: Int
  description: String!

  """World ID"""
  id: Int
  name: String!

  """Is this world public?"""
  public: Boolean = false
  type: WorldType!
}

type Mutation {
  deleteCharacter(id: Int!): MFCharacter

  """Delete an `Event`"""
  deleteEvent(id: Int!): MFEvent
  deleteLocation(id: Int!): MFLocation
  deleteRelationship(id: Int!): MFCharacterRelationship

  """Delete a `Timeline` and all its events"""
  deleteTimeline(id: Int!): MFTimeline

  """Delete a `TimelineEvent`"""
  deleteTimelineEvent(id: Int!): MFTimelineEvent
  deleteWorld(id: Int!): MFWorld
  upsertCharacter(
    """The data to create a new character"""
    data: MFCharacterUpsertInput!
  ): MFCharacter

  """Create or update one or more `Events`"""
  upsertEvents(data: [MFEventUpsertInput]!): [MFEvent]
  upsertLocation(
    """The data to create a new location"""
    data: MFLocationUpsertInput!
  ): MFLocation
  upsertRelationships(
    """The data to create a new character relationship"""
    data: [MFRelationshipUpsertInput!]!
  ): [MFCharacterRelationship]

  """Create a new `Timeline` along with its events"""
  upsertTimeline(data: MFTimelineUpsertInput!): MFTimeline

  """Update a `Timeline`'s events"""
  upsertTimelineEvents(events: [MFTimelineEventUpsertInput!], id: Int!): [MFTimelineEvent]
  upsertWorld(
    """The data to create a new world"""
    data: MFWorldUpsertInput!
  ): MFWorld
}

type Query {
  getCharacterById(id: Int!): MFCharacter
  getEventById(id: Int!): MFEvent
  getLocationById(id: Int!): MFLocation
  getRelationshipById(id: Int!): MFCharacterRelationship
  getTimelineById(id: Int!): MFTimeline
  getWorldById(id: Int!): MFWorld
  listAuthorTimelines(authorId: Int!): [MFTimeline]

  """
  List/filter multiple `Characters`. Author can view their own characters, a reader can view public characters
  """
  listCharacters(authorId: Int, description: String, id: Int, name: String, worldId: Int): [MFCharacter]

  """
  List/filter multiple `Locations`. Author can view their own locations, a reader can view public locations
  """
  listLocations(authorId: Int, description: String, id: Int, name: String, worldId: Int!): [MFLocation]

  """List/filter multiple `Character Relationships`."""
  listRelationships(characterId: Int, id: Int, relationship: String, targetId: Int): [MFCharacterRelationship]
  listTimelineEvents(timelineId: Int!): [MFTimelineEvent]
  listTimelines(authorId: Int, name: String, worldId: Int): [MFTimeline]
  listWorldEvents(authorId: Int, characterId: Int, description: String, groupId: Int, locationId: Int, name: String, polarity: EventPolarity, target: EventTarget, worldId: Int): [MFEvent]

  """
  List/filter multiple `Worlds`. Author can view their own worlds, a reader can view public worlds
  """
  listWorlds(authorId: Int, description: String, id: Int, name: String, public: Boolean = true): [MFWorld]
}

"""Relative abundance of resources."""
enum Richness {
  Abundant
  Adequate
  Barren
  Sparse
}

"""A type of application user"""
enum UserRole {
  Author
  Reader
}

"""A type of World (super-set of locations) """
enum WorldType {
  Other
  Realm
  Universe
}