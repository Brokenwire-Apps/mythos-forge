### This file was generated by Nexus Schema
### Do not make changes to this file directly


"""User authentication provider"""
enum Authenticator {
  google
  magic
  other
}

"""The status of a Chapter"""
enum ChapterStatus {
  Archived
  Draft
  Published
}

"""The general climate of a setting."""
enum Climate {
  Polar
  Temperate
  Unspecified
  Warm
}

"""UTC Date-time"""
scalar CsDateTime

"""The type of significant Event that occurs in a World."""
enum EventPolarity {
  NegativeExpected
  NegativeUnexpected
  Neutral
  PositiveExpected
  PositiveUnexpected
}

"""The target of a significant Event that occurs in a World"""
enum EventTarget {
  Local
  Person
  World
}

"""A super-set of Character types (e.g. trade profession)"""
enum GroupType {
  Culture
  Other
  Philosophy
  Trade
}

"""A type of Location"""
enum LocationType {
  Building
  City
  Continent
  Country
  Other
  Region
  Ruins
  Settlement
  Town
  Village
}

"""An abbreviated `MFUser` model"""
type MFAuthor {
  Books: [MFBook]
  Series: [MFSeries]
  Timelines: [MFTimeline]
  Worlds: [MFWorld]
  displayName: String!
  email: String!
  firstName: String
  id: Int!
  image: String
  lastName: String
  role: UserRole
}

"""A collection of story `Chapters`"""
type MFBook {
  Author: MFAuthor
  Chapters: [MFChapter]

  """Book Author/owner"""
  authorId: Int

  """Item created"""
  created: CsDateTime
  description: String!

  """Book is free to read"""
  free: Boolean
  genre: String!
  id: Int!
  image: String

  """Fictional World location of Book"""
  locationId: Int

  """Book order in series"""
  order: Int

  """Book price in USD"""
  price: Float

  """Book is publicly visible"""
  public: Boolean!

  """Item published for public consumption"""
  publishDate: CsDateTime

  """Book series parent id"""
  seriesId: Int
  title: String!

  """Item updated"""
  updated: CsDateTime

  """Fictional World location of Book"""
  worldId: Int
}

input MFBookUpsertInput {
  """Item Author/owner"""
  authorId: Int
  chapters: [MFChapterUpsertInput!]
  description: String!
  genre: String!

  """Book ID"""
  id: Int
  image: String

  """Event location target (optional)"""
  locationId: Int

  """Sequence in series (if part of one"""
  order: Int
  price: Float = 0
  public: Boolean = false

  """Parent Series"""
  seriesId: Int
  title: String!

  """Parent world ID"""
  worldId: Int
}

"""A collection of Story `Scenes`"""
type MFChapter {
  Author: MFAuthor
  Links: [MFSceneContentLink]
  Scenes: [MFScene]

  """Author owner"""
  authorId: Int

  """Chapter's Book id"""
  bookId: Int

  """Item created"""
  created: CsDateTime
  description: String
  id: Int!
  image: String
  order: Int!

  """Status"""
  status: ChapterStatus
  title: String!

  """Item updated"""
  updated: CsDateTime
}

input MFChapterUpsertInput {
  """Item Author/owner"""
  authorId: Int

  """Parent Book"""
  bookId: Int!
  description: String

  """Chapter ID"""
  id: Int
  image: String

  """Sequence in book (if part of one"""
  order: Int
  scenes: [MFSceneUpsertInput!]
  title: String!
}

"""A significant actor in a `World`"""
type MFCharacter {
  CharacterRelationship: [MFCharacterRelationship]
  World: MFWorld

  """Author owner"""
  authorId: Int

  """Character description"""
  description: String!

  """`Group` identifier id (optional)"""
  groupId: Int
  id: Int!
  image: String

  """Character's `Location` id"""
  locationId: Int

  """Character name"""
  name: String!

  """Character's `World` id"""
  worldId: Int!
}

"""A linear relationship betwen actors in a `World`"""
type MFCharacterRelationship {
  Character: MFCharacter
  characterId: Int!
  id: Int!
  relationship: String!
  targetId: Int!
}

input MFCharacterUpsertInput {
  """Item Author/owner"""
  authorId: Int

  """Character writing-prompts or bio"""
  description: String = "No description"

  """Character group/profession (OPTIONAL)"""
  groupId: Int

  """Character ID"""
  id: Int
  image: String

  """Character location (OPTIONAL)"""
  locationId: Int
  name: String!

  """World ID"""
  worldId: Int!
}

input MFContentLinkUpsertInput {
  """Item Author/owner"""
  authorId: Int
  bookId: Int!
  chapterId: Int

  """ContentLink ID"""
  id: Int

  """Link's scene of origin"""
  originId: Int!
  sceneId: Int
  seriesId: Int
  text: String! = "Mystery Link"
}

"""
A significant occurrence in a World or other location that acts as a story catalyst. 
"""
type MFEvent {
  World: MFWorld

  """Event Author"""
  authorId: Int

  """`Character` target (optional)"""
  characterId: Int
  description: String

  """`Group` target (optional)"""
  groupId: Int
  id: Int!

  """`Location` target (optional)"""
  locationId: Int
  name: String!
  polarity: EventPolarity!
  target: EventTarget!

  """Event target `World`"""
  worldId: Int!
}

input MFEventUpsertInput {
  """Item Author/owner"""
  authorId: Int

  """Event character target (optional)"""
  characterId: Int
  description: String = "No description"

  """Event group target (optional)"""
  groupId: Int

  """Event ID"""
  id: Int

  """Event location target (optional)"""
  locationId: Int
  name: String!
  polarity: EventPolarity!
  target: EventTarget!

  """Parent world ID"""
  worldId: Int!
}

"""A CYOA-style exploration of a `World` or `Location`, based on a `Book`"""
type MFExploration {
  """Exploration Author"""
  Author: MFAuthor

  """Linked Location"""
  Location: MFLocation
  Scenes: [MFExplorationScene]!

  """Linked World"""
  World: MFWorld

  """Exploration Author"""
  authorId: Int
  created: CsDateTime
  description: String

  """Free item"""
  free: Boolean
  id: Int!
  image: String
  lastUpdated: CsDateTime

  """Location target id"""
  locationId: Int

  """Book price in USD"""
  price: Float

  """Visible to public"""
  public: Boolean
  publishDate: CsDateTime
  title: String!

  """Character attributes required to play (OPTIONAL)"""
  usesAttributes: String

  """World target id"""
  worldId: Int!
}

"""A single scene in a CYOA-style exploration"""
type MFExplorationScene {
  """Linked Scene"""
  Exploration: MFExploration
  authorId: Int

  """Scene bg data"""
  background: String

  """Scene characters"""
  characters: String
  description: String

  """Exploration target id"""
  explorationId: Int!

  """Scene objects"""
  foreground: String
  id: Int!

  """Scene order in exploration"""
  order: Int!
  title: String!
}

input MFExplorationSceneUpsertInput {
  """Item Author/owner"""
  authorId: Int

  """Scene bg data"""
  background: String

  """Scene characters"""
  characters: String
  description: String

  """Exploration target id"""
  explorationId: Int

  """Scene objects"""
  foreground: String
  id: Int

  """Scene order in exploration"""
  order: Int!
  title: String!
}

input MFExplorationUpsertInput {
  Scenes: [MFExplorationSceneUpsertInput!]

  """Item Author/owner"""
  authorId: Int
  description: String

  """Exploration ID"""
  id: Int
  image: String

  """Location ID"""
  locationId: Int
  price: Float = 0
  public: Boolean = false
  publishDate: CsDateTime
  title: String!

  """Attributes used in exploration"""
  usesAttributes: String

  """Parent world ID"""
  worldId: Int!
}

input MFGroupUpsertInput {
  """Item Author/owner"""
  authorId: Int
  description: String!

  """Group ID"""
  id: Int
  name: String!
  type: GroupType!

  """Parent world ID"""
  worldId: Int!
}

"""A user's collection of purchased books"""
type MFLibrary {
  Book: MFBook
  Exploration: MFExploration
  Series: MFSeries

  """ID of Book purchase"""
  bookId: Int

  """ID of Exploration purchase"""
  explorationId: Int
  id: Int!
  order: Int!

  """Make this visible on user profile"""
  publicPurchase: Boolean!
  purchaseDate: CsDateTime

  """ID of Series purchase"""
  seriesId: Int
  userId: Int!
}

"""A fixed, recurring setting in a World. """
type MFLocation {
  Characters: [MFCharacter]
  ChildLocations: [MFLocation]
  Events: [MFEvent]
  Groups: [MFPopulationGroup]
  ParentLocation: MFLocation
  World: MFWorld

  """Event Author"""
  authorId: Int
  childLocationCount: Int
  climate: Climate
  description: String!
  fauna: Richness
  flora: Richness
  id: Int!
  name: String!

  """Parent Location id (optional)"""
  parentLocationId: Int
  type: LocationType!

  """Event target `World`"""
  worldId: Int!
}

input MFLocationUpsertInput {
  """Item Author/owner"""
  authorId: Int
  climate: Climate
  description: String!

  """Location east neighbor"""
  eastOf: Int
  fauna: Richness
  flora: Richness

  """Location ID"""
  id: Int
  image: String
  name: String!

  """Location north neighbor"""
  northOf: Int

  """Parent location (optional)"""
  parentLocationId: Int

  """Location south neighbor"""
  southOf: Int
  type: LocationType!

  """Location west neighbor"""
  westOf: Int

  """Parent world ID"""
  worldId: Int!
}

"""A collection of `Characters` (e.g. profession or religion)"""
type MFPopulationGroup {
  Character: [MFCharacter]
  Event: [MFEvent]

  """Group Author"""
  authorId: Int
  description: String!
  id: Int!

  """`PopulationGroup`'s location id"""
  locationId: Int
  name: String!

  """Group type"""
  type: GroupType!

  """`PopulationGroup`'s World id"""
  worldId: Int!
}

input MFRelationshipUpsertInput {
  """Item Author/owner"""
  authorId: Int

  """Character ID"""
  characterId: Int!

  """Relationship ID"""
  id: Int

  """Relationship notes"""
  relationship: String!

  """Target Character ID"""
  targetId: Int!
}

"""A chunk of story in a chapter`"""
type MFScene {
  Links: [MFSceneContentLink]

  """Scene Author"""
  authorId: Int

  """Scene parent `Chapter`"""
  chapterId: Int!

  """Scene target `Character`"""
  characterId: Int

  """Item created"""
  created: CsDateTime
  description: String

  """Main `Event` affecting `Scene`"""
  eventContextId: Int
  id: Int!
  image: String
  order: Int!
  text: String

  """`Event` Context Timeline (optional)"""
  timelineId: Int
  title: String!

  """Item updated"""
  updated: CsDateTime
}

"""A link to a piece of content"""
type MFSceneContentLink {
  authorId: Int
  bookId: Int!
  chapterId: Int
  id: Int!
  originId: Int!
  sceneId: Int
  seriesId: Int
  text: String!
}

input MFSceneUpsertInput {
  """Item Author/owner"""
  authorId: Int

  """Parent Chapter"""
  chapterId: Int!

  """Scene primary character"""
  characterId: Int
  description: String

  """Scene event context"""
  eventContextId: Int

  """Scene ID"""
  id: Int
  image: String

  """Sequence in chapter (if part of one"""
  order: Int!
  text: String!

  """Scene event timeline"""
  timelineId: Int
  title: String!
}

"""A search result"""
type MFSearchResult {
  books: [MFBook]!
  series: [MFSeries]!
}

"""A collection of `Books` (e.g. a trilogy)"""
type MFSeries {
  Author: MFAuthor
  Books: [MFBook]!

  """Book Author/owner"""
  authorId: Int

  """Item created"""
  created: CsDateTime
  description: String!

  """Book is free to read"""
  free: Boolean
  genre: String!
  id: Int!
  image: String

  """Book price in USD"""
  price: Float

  """Series is publicly visible"""
  public: Boolean!

  """Item published for public consumption"""
  publishDate: CsDateTime
  title: String!

  """Item updated"""
  updated: CsDateTime
}

input MFSeriesUpsertInput {
  """Item Author/owner"""
  authorId: Int
  books: [MFBookUpsertInput!]
  description: String!
  genre: String!

  """Series ID"""
  id: Int
  image: String
  price: Float = 0
  public: Boolean = false
  title: String!
}

"""A collection of Story `Scenes`"""
type MFTimeline {
  Author: MFAuthor
  Scenes: [MFScene]
  TimelineEvents: [MFTimelineEvent]
  World: MFWorld

  """Timeline Author"""
  authorId: Int
  id: Int!
  name: String!

  """Timeline's `World` id"""
  worldId: Int!
}

"""A linear `Event`-to-`Timeline` relationship"""
type MFTimelineEvent {
  Event: MFEvent
  Scenes: [MFScene]

  """Timeline Author"""
  authorId: Int

  """Target `Event` id"""
  eventId: Int!
  id: Int!
  order: Int!

  """Target `Timeline` id"""
  timelineId: Int!
}

input MFTimelineEventUpsertInput {
  """Item Author/owner"""
  authorId: Int

  """Event ID"""
  eventId: Int!

  """TimelineEvent ID"""
  id: Int

  """Event order in timeline"""
  order: Int!

  """Timeline ID"""
  timelineId: Int!
}

input MFTimelineUpsertInput {
  """Item Author/owner"""
  authorId: Int
  events: [MFTimelineEventUpsertInput!]

  """Timeline ID"""
  id: Int
  name: String!

  """Parent world ID"""
  worldId: Int!
}

"""An Application user"""
type MFUser {
  Books: [MFBook]
  Characters: [MFCharacter]
  Series: [MFSeries]
  Timelines: [MFTimeline]
  Worlds: [MFWorld]
  authSource: Authenticator!
  created: CsDateTime!
  displayName: String!
  email: String!
  firstName: String
  id: Int!
  image: String
  lastName: String
  lastSeen: CsDateTime!
  role: UserRole!
}

input MFUserUpsertInput {
  displayName: String
  email: String
  firstName: String
  image: String
  lastName: String
  password: String
}

"""A collection of `Locations`"""
type MFWorld {
  ChildWorlds: [MFWorld]
  Events: [MFEvent]
  Groups: [MFPopulationGroup]
  Locations: [MFLocation]
  Timelines: [MFTimeline]

  """Book Author/owner"""
  authorId: Int
  childWorldsCount: Int
  description: String!
  id: Int!
  image: String
  name: String!

  """Optional world parent"""
  parentWorldId: Int
  public: Boolean!
  type: WorldType!
}

input MFWorldUpsertInput {
  """Item Author/owner"""
  authorId: Int
  description: String!

  """World ID"""
  id: Int
  image: String
  name: String!

  """Parent world (optional)"""
  parentWorldId: Int

  """Is this world public?"""
  public: Boolean = false
  type: WorldType!
}

type Mutation {
  deleteBook(id: Int!): MFBook
  deleteChapter(id: Int!): MFChapter
  deleteCharacter(id: Int!): MFCharacter
  deleteContentLink(id: Int!): MFSceneContentLink

  """Delete an `Event`"""
  deleteEvent(id: Int!): MFEvent
  deleteExploration(id: Int!): MFExploration
  deleteExplorationScene(id: Int!): MFExplorationScene
  deleteLocation(id: Int!): MFLocation
  deleteRelationship(id: Int!): MFCharacterRelationship
  deleteScene(id: Int!): MFScene
  deleteSeries(id: Int!): MFSeries

  """Delete a `Timeline` and all its events"""
  deleteTimeline(id: Int!): MFTimeline

  """Delete a `TimelineEvent`"""
  deleteTimelineEvent(id: Int!): MFTimelineEvent
  deleteWorld(id: Int!): MFWorld
  publishBook(id: Int!): MFBook
  publishSeries(id: Int!): MFSeries

  """Update user info"""
  updateUser(data: MFUserUpsertInput!, id: Int!): MFAuthor
  upsertBook(
    """The data to create a new book"""
    data: MFBookUpsertInput!
  ): MFBook
  upsertChapter(
    """The data to create a new chapter"""
    data: MFChapterUpsertInput!
  ): MFChapter
  upsertCharacter(
    """The data to create a new character"""
    data: MFCharacterUpsertInput!
  ): MFCharacter
  upsertContentLinks(data: [MFContentLinkUpsertInput!]): [MFSceneContentLink]

  """Create or update one or more `Events`"""
  upsertEvents(data: [MFEventUpsertInput]!): [MFEvent]
  upsertExploration(data: MFExplorationUpsertInput!): MFExploration
  upsertExplorationScene(data: MFExplorationSceneUpsertInput!): MFExplorationScene
  upsertLocation(
    """The data to create a new location"""
    data: MFLocationUpsertInput!
  ): MFLocation
  upsertRelationships(
    """The data to create a new character relationship"""
    data: [MFRelationshipUpsertInput!]!
  ): [MFCharacterRelationship]
  upsertScene(
    """The data to create a new scene"""
    data: MFSceneUpsertInput!
  ): MFScene
  upsertSeries(
    """The data to create a new series"""
    data: MFSeriesUpsertInput!
  ): MFSeries

  """Create a new `Timeline` along with its events"""
  upsertTimeline(data: MFTimelineUpsertInput!): MFTimeline

  """Update a `Timeline`'s events"""
  upsertTimelineEvents(events: [MFTimelineEventUpsertInput!], id: Int!): [MFTimelineEvent]
  upsertWorld(
    """The data to create a new world"""
    data: MFWorldUpsertInput!
  ): MFWorld
}

"""A note about a character, location, or event"""
type Note {
  """Note Author"""
  Author: MFAuthor

  """Book target"""
  Book: MFBook

  """Chapter target"""
  Chapter: MFChapter

  """Character target"""
  Character: MFCharacter

  """Scene target"""
  Scene: MFScene

  """Note Author"""
  authorId: Int!

  """Book target id"""
  bookId: Int

  """Chapter target id"""
  chapterId: Int

  """Character target id"""
  characterId: Int
  description: String!
  id: Int!
  image: String

  """Scene target id"""
  sceneId: Int
  title: String!
}

type Query {
  """Get the currently authenticated user"""
  getAuthUser: MFAuthor

  """Get an author by id"""
  getAuthor(id: Int!): MFAuthor
  getBookById(id: Int!): MFBook
  getChapterById(id: Int!): MFChapter
  getCharacterById(id: Int!): MFCharacter
  getContentLink(id: Int!): MFSceneContentLink
  getEventById(id: Int!): MFEvent
  getExploration(id: Int!): MFExploration
  getExplorationScene(id: Int!): MFExplorationScene
  getLocationById(id: Int!): MFLocation
  getRelationshipById(id: Int!): MFCharacterRelationship
  getSceneById(id: Int!): MFScene
  getSeriesById(id: Int!): MFSeries
  getTimelineById(id: Int!): MFTimeline
  getWorld(id: Int!): MFWorld
  getWorldById(id: Int!): MFWorld
  listBooks(authorId: Int, description: String, free: Boolean = false, genre: String, public: Boolean = false, seriesId: Int, title: String): [MFBook]
  listChapters(authorId: Int, bookId: Int!, description: String, id: [Int!], title: String): [MFChapter]

  """
  List/filter multiple `Characters`. Author can view their own characters, a reader can view public characters
  """
  listCharacters(authorId: Int, description: String, id: Int, name: String, worldId: Int): [MFCharacter]
  listContentLinks(authorId: Int, bookId: Int, chapterId: Int, sceneId: Int, seriesId: Int, text: String): [MFSceneContentLink]
  listExplorationScenes(explorationId: Int!): [MFExplorationScene]
  listExplorations(attributes: [String!], authorId: Int, description: String, freeOnly: Boolean, id: Int, inLibraryOnly: Boolean, locationId: Int, maxPrice: Int, minPrice: Int, publicOnly: Boolean, publishedOnly: Boolean, title: String, worldId: Int): [MFExploration]

  """
  List/filter multiple `Locations`. Author can view their own locations, a reader can view public locations
  """
  listLocations(authorId: Int, description: String, id: Int, name: String, worldId: Int!): [MFLocation]

  """List/filter multiple `Character Relationships`."""
  listRelationships(characterId: Int, id: Int, relationship: String, targetId: Int): [MFCharacterRelationship]
  listScenes(authorId: Int, chapterId: Int!, description: String, id: [Int!], text: String, title: String): [MFScene]
  listSeries(authorId: Int, description: String, freeOnly: Boolean, genre: String, publicOnly: Boolean, title: String): [MFSeries]
  listSeriesPublications(authorId: Int, description: String, genre: String, title: String): [MFSeries]
  listTimelineEvents(timelineId: Int!): [MFTimelineEvent]
  listTimelines(authorId: Int, name: String, worldId: Int): [MFTimeline]
  listWorldEvents(authorId: Int, characterId: Int, description: String, groupId: Int, locationId: Int, name: String, polarity: EventPolarity, target: EventTarget, worldId: Int): [MFEvent]

  """
  List/filter multiple `Worlds`. Author can view their own worlds, a reader can view public worlds
  """
  listWorlds(authorId: Int, description: String, id: Int, name: String, parentWorldId: Int, parentsOnly: Boolean = false, public: Boolean = true): [MFWorld]
  searchPublications(authorId: Int, description: String, freeOnly: Boolean = false, genre: String, seriesId: Int, title: String): MFSearchResult
}

"""Relative abundance of resources."""
enum Richness {
  Abundant
  Adequate
  Barren
  Sparse
  Unspecified
}

"""A type of application user"""
enum UserRole {
  Admin
  Author
  Moderator
  Reader
}

"""A type of World (super-set of locations) """
enum WorldType {
  Galaxy
  Other
  Planet
  Realm
  Star
  Universe
}